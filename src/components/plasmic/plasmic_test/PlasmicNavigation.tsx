// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: itmdg5kTwTPM7Z7CWx2NER
// Component: Mo_a8cHyb5

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_plasmic_test.module.css"; // plasmic-import: itmdg5kTwTPM7Z7CWx2NER/projectcss
import sty from "./PlasmicNavigation.module.css"; // plasmic-import: Mo_a8cHyb5/css

import StaRsvgIcon from "./icons/PlasmicIcon__StaRsvg"; // plasmic-import: qFBkxDYko/icon

export type PlasmicNavigation__VariantMembers = {};
export type PlasmicNavigation__VariantsArgs = {};
type VariantPropType = keyof PlasmicNavigation__VariantsArgs;
export const PlasmicNavigation__VariantProps = new Array<VariantPropType>();

export type PlasmicNavigation__ArgsType = {};
type ArgPropType = keyof PlasmicNavigation__ArgsType;
export const PlasmicNavigation__ArgProps = new Array<ArgPropType>();

export type PlasmicNavigation__OverridesType = {
  root?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  freeBox?: p.Flex<"div">;
};

export interface DefaultNavigationProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicNavigation__RenderFunc(props: {
  variants: PlasmicNavigation__VariantsArgs;
  args: PlasmicNavigation__ArgsType;
  overrides: PlasmicNavigation__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {true ? (
        <a
          className={classNames(
            projectcss.all,
            projectcss.a,
            sty.link__xwscx,
            "link home" as const
          )}
          href={"/" as const}
          target={undefined}
        >
          <StaRsvgIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />
        </a>
      ) : null}
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <a
          className={classNames(
            projectcss.all,
            projectcss.a,
            sty.link___3Ft5W,
            "link about" as const
          )}
          href={`/home`}
          target={"_blank" as const}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___2ZmMl
            )}
          >
            {"About"}
          </div>
        </a>
        <a
          className={classNames(
            projectcss.all,
            projectcss.a,
            sty.link__zFNfp,
            "link about" as const
          )}
          href={"https://www.itsbombom.com" as const}
          target={"_blank" as const}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__hUwuJ
            )}
          >
            {"Shop"}
          </div>
        </a>
        <a
          className={classNames(
            projectcss.all,
            projectcss.a,
            sty.link__tMqgF,
            "link about" as const
          )}
          href={"https://www.itsbombom.com" as const}
          target={"_blank" as const}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__vosJa
            )}
          >
            {"Map"}
          </div>
        </a>
        <a
          className={classNames(
            projectcss.all,
            projectcss.a,
            sty.link___7Vz4J,
            "link about" as const
          )}
          href={"https://www.itsbombom.com" as const}
          target={"_blank" as const}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__qnp14
            )}
          >
            {"Extras"}
          </div>
        </a>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg", "freeBox"],
  svg: ["svg"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  svg: "svg";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavigation__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavigation__VariantsArgs;
    args?: PlasmicNavigation__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavigation__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNavigation__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNavigation__ArgProps,
          internalVariantPropNames: PlasmicNavigation__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavigation__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavigation";
  } else {
    func.displayName = `PlasmicNavigation.${nodeName}`;
  }
  return func;
}

export const PlasmicNavigation = Object.assign(
  // Top-level PlasmicNavigation renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicNavigation
    internalVariantProps: PlasmicNavigation__VariantProps,
    internalArgProps: PlasmicNavigation__ArgProps
  }
);

export default PlasmicNavigation;
/* prettier-ignore-end */
